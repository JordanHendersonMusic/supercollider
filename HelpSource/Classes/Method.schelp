class::Method
categories::Core>Kernel
summary:: Code that implements an operation upon instances of a Class.
related:: Classes/Class

description::
link::Classes/Method::s are created for each method defined with a class.

For a definition of a method,
see link::Guides/Intro-to-Objects:: and link::Guides/WritingClasses::.

subsection:: Related Keywords

method:: thisMethod

The global pseudo-variable code::thisMethod:: always evaluates to the enclosing Method in a class definition, much like code::thisFunction::.
When executed outside that context, it returns link::Classes/Interpreter#-functionCompileContext::, the method within which all interpreted code executes.

code::
// if the following code were compiled as part of the class library:
SomeClass {
	methodThatPostsItself {
		thisMethod.postln;
	}
}

// then running this would post
// "SomeClass:methodThatPostsItself"
a = SomeClass.new;
a.methodThatPostsItself;
::

code::thisMethod:: is frequently used to pass information to error-throwing methods. For example, the implementation of code::Nil.new:: is:

code::
*new { ^this.shouldNotImplement(thisMethod) }
::

See also: link::Classes/Function#.thisFunction#thisFunction::.

instanceMethods::

method::ownerClass
returns::
If the receiver is an instance method, the owner class is the class for this instance.
For a class method, it is the class of the class, whose name is prefixed with "Meta_".

code::
m = Array.findRespondingMethodFor('reverse');
m.ownerClass; // Array
m = Array.class.findRespondingMethodFor(\new);
m.ownerClass; // Meta_Array
::

method::name
returns::
A link::Classes/Symbol:: which is the name of the Method.

method::primitiveName
returns::
A link::Classes/Symbol:: which contains the name of the primitive function that implements the Method,
if there is one, otherwise returns link::Classes/Nil::.

method::argumentNamesForCall
Returns the argument names as needed for calling the function as an link::Classes/Array::.
This will remove any internal arguments include 'this'.

method:: filenameSymbol
returns::
A link::Classes/Symbol:: which is the full path of the source file that this method is defined in.

method::makePerformableArray
This is used internally by link::Classes/Object#-performWith:: which is sufficient for all uses and recommended over link::#-makePerformableArray::.

Returns an array that can be passed to link::Classes/Object#-performList:: along with the selector.

Both keyword and non-keyword arguments may be provided at the same time.

Errors are thrown if: a value for an argument is present in both the code::argumentsArray:: and the code::keywordArgumentPairs:: (argument collision),
if a keyword argument's name cannot be found (unknown keyword),
and if too many arguments are given to code::argumentsArray:: (too many arguments).

Variable arguments are best placed with a keyword argument.
However, if the code::keywordArgumentPairs:: is empty and all arguments in the code::argumentsArray:: are present, any extra arguments in code::argumentsArray:: will be passed to the variable argument, if present.


argument::argumentsArray
Arguments as an link::Classes/Array::.

argument::keywordArgumentPairs
Keyword arguments as any link::Reference/Key-Value-Pairs:: structure.

returns::Arguments as an link::Classes/Array::.

discussion::
code::
a = "meow MEOW woof bahh bahh Meow";

// how a user might call a method
a.findAll("meow", ignoreCase: true);


// using makePerformableArray directly, not recommended
(
var args = String
	.findRespondingMethodFor('findAll')
	.makePerformableArray(["meow"], [ignoreCase: true]);

a.performList('findAll', args);
)

// using performWith, recommended
a.performWith('findAll', ["meow"], [ignoreCase: true]);
::
